Variable Creation:(std::string type, std::string message){
    m_type = type;
    m_mess = message;
    PyObject *ptype,*value,*tb;
    PyErr_Fetch(&ptype,&value,&tb);
    if (value!=NULL){
        m_mess+="\n\t"+PyVariable(ptype)["__name__"].str()+": "+PyVariable(value).str();//("__str__").call().str();
    }
}
 Variable Encoder:protected:
    //Batch size
      const int M;
    //Layer sizes
      const int kInput_to_hidden_layer;
      const int kHidden_to_output_layer;
      int       NDataPoints;
      bool bVarPar;
      bool bVarVar;
   //!Contains all the parameters in a row, indices are used to separate the different parts
   //! In this order : {x_i},{W_0},{b_0},{W_1a},{b_1a},{W_1b},{b_1b},{W_2},{b_2},{W_3a},{b_3a},{W_3b},{b_3b}
   std::vector<double> independent_parameters;
   int *               array_sizes;
   int *               array_indices;
   std::vector<double> gradient_parameters;
   std::vector<double> prev_gradient_parameters;
   std::vector<double> values;
   std::string model_filename;
   std::string output_filename;
   std::string convergence_filename;
   int NDataPoint;

 public :
   Variational_AutoEncoder(const int input_layer, const int hidden_layer, const double iteration, const double learn_rate,
			   const double noise_rate, const double drop_rate, const double momentum, const double weight_decay,
			   const int k1, const int k2, const int batch_size, const int variation_type,
			   const std::string model_filename,
                const std::string output_filename, const std::string convergence_filename);

   virtual ~Variational_AutoEncoder(void);
   void write_convergence();
   void fit(const std::vector< std::vector<double> >& data_set);
   void predict(const std::vector< std::vector<double> >& data_set);
   void save(const std::string& filename);
   void load(const std::string& filename);

protected :
   std::vector<double>  create_noise(int dim);
   adouble              adtotal_objective_function(std::vector<std::vector<double> > & par_noise,  std::vector<std::vector<double> > & var_noise, int tag = 6, bool tracing = true);
   void                 Update_Weights();
   dvector corrupt_data(const dvector& data);
   dvector binomial(const int n, const double p, const int size);
   pdvector param_representation(const dvector& v, const pdmatrix&w,
                           const pdvector& bias, const int dim);
   std::vector<double> encode(const std::vector<double>& x);
   std::vector<double> decode(const std::vector<double>& y);
   pdvector forward_propagate(const dvector& input, dvector& activation);
   void dropconnect(void);
   double sgd(const std::vector<std::vector<double> >& dataset,std::vector<std::vector<double> > & par_noisematrix,std::vector<std::vector<double> > & var_noisematrix);
   int random_index(const int datasetsize) {
     return Random::generate(0.0, datasetsize);
   }
   double sum(const std::vector<double> & v, int start = 0){ double res(0); for(;(unsigned)start<v.size();start++) res += v[start]; return res;}
   double avg(const std::vector<double> & v, int start = 0){ return sum(v,start)/(double)v.size();}
   double sum(const std::deque<double> & v){double res(0); for(double d : v) res+=d;return res;}
   double avg(const std::deque<double> & v){return sum(v)/(double)v.size();}
   void initialize_weights(const int & start, const int & input, const int & length) {
                    for_each(independent_parameters.begin()+start,independent_parameters.begin()+start+length,
                                                [input](double& x){x=Random::generate(
                                                -1.0/(2.0*sqrt((double)input)),
                                                1.0/(2.0*sqrt((double)input)));});}
 protected :
   dmatrix adagrad(const dmatrix& g);
   dvector adagrad(const dvector& g);
   void    adagrad(double * v, int begin, int size);
 protected :
   friend class boost::serialization::access;
   template <class Archive>
   void serialize(Archive& ar, unsigned int /*version*/) {
	 /*ar & boost::serialization::make_nvp("hidden_layer", const_cast<double&>(kHiddenLayer));
	 ar & boost::serialization::make_nvp("weight_input", weight_input_);
	 ar & boost::serialization::make_nvp("weight_hidden", weight_hidden_);
	 ar & boost::serialization::make_nvp("bias_hidden", bias_hidden_);
	 ar & boost::serialization::make_nvp("bias_output", bias_output_);*/
   }
};
Varaible/Path Movement:
